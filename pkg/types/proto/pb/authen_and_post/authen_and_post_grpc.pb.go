// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: authen_and_post.proto

package authen_and_post

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthenticateAndPostClient is the client API for AuthenticateAndPost service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthenticateAndPostClient interface {
	CheckUserAuthentication(ctx context.Context, in *CheckUserAuthenticationRequest, opts ...grpc.CallOption) (*CheckUserAuthenticationResponse, error)
	CreateUser(ctx context.Context, in *UserDetailInfo, opts ...grpc.CallOption) (*UserResult, error)
	EditUser(ctx context.Context, in *EditUserRequest, opts ...grpc.CallOption) (*EditUserResponse, error)
	GetUserFollower(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*UserFollower, error)
	GetPostDetail(ctx context.Context, in *GetPostRequest, opts ...grpc.CallOption) (*Post, error)
	FollowUser(ctx context.Context, in *FollowUserRequest, opts ...grpc.CallOption) (*FollowUserResponse, error)
	UnfollowUser(ctx context.Context, in *UnfollowUserRequest, opts ...grpc.CallOption) (*UnfollowUserResponse, error)
	GetFollowerList(ctx context.Context, in *GetFollowerListRequest, opts ...grpc.CallOption) (*GetFollowerListResponse, error)
	CreatePost(ctx context.Context, in *CreatePostRequest, opts ...grpc.CallOption) (*CreatePostResponse, error)
	GetPost(ctx context.Context, in *GetPostRequest, opts ...grpc.CallOption) (*GetPostResponse, error)
	DeletePost(ctx context.Context, in *DeletePostRequest, opts ...grpc.CallOption) (*DeletePostResponse, error)
	EditPost(ctx context.Context, in *EditPostRequest, opts ...grpc.CallOption) (*EditPostResponse, error)
	CreatePostComment(ctx context.Context, in *CreatePostCommentRequest, opts ...grpc.CallOption) (*CreatePostCommentResponse, error)
	LikePost(ctx context.Context, in *LikePostRequest, opts ...grpc.CallOption) (*LikePostResponse, error)
}

type authenticateAndPostClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthenticateAndPostClient(cc grpc.ClientConnInterface) AuthenticateAndPostClient {
	return &authenticateAndPostClient{cc}
}

func (c *authenticateAndPostClient) CheckUserAuthentication(ctx context.Context, in *CheckUserAuthenticationRequest, opts ...grpc.CallOption) (*CheckUserAuthenticationResponse, error) {
	out := new(CheckUserAuthenticationResponse)
	err := c.cc.Invoke(ctx, "/authen_and_post.AuthenticateAndPost/CheckUserAuthentication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticateAndPostClient) CreateUser(ctx context.Context, in *UserDetailInfo, opts ...grpc.CallOption) (*UserResult, error) {
	out := new(UserResult)
	err := c.cc.Invoke(ctx, "/authen_and_post.AuthenticateAndPost/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticateAndPostClient) EditUser(ctx context.Context, in *EditUserRequest, opts ...grpc.CallOption) (*EditUserResponse, error) {
	out := new(EditUserResponse)
	err := c.cc.Invoke(ctx, "/authen_and_post.AuthenticateAndPost/EditUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticateAndPostClient) GetUserFollower(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (*UserFollower, error) {
	out := new(UserFollower)
	err := c.cc.Invoke(ctx, "/authen_and_post.AuthenticateAndPost/GetUserFollower", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticateAndPostClient) GetPostDetail(ctx context.Context, in *GetPostRequest, opts ...grpc.CallOption) (*Post, error) {
	out := new(Post)
	err := c.cc.Invoke(ctx, "/authen_and_post.AuthenticateAndPost/GetPostDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticateAndPostClient) FollowUser(ctx context.Context, in *FollowUserRequest, opts ...grpc.CallOption) (*FollowUserResponse, error) {
	out := new(FollowUserResponse)
	err := c.cc.Invoke(ctx, "/authen_and_post.AuthenticateAndPost/FollowUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticateAndPostClient) UnfollowUser(ctx context.Context, in *UnfollowUserRequest, opts ...grpc.CallOption) (*UnfollowUserResponse, error) {
	out := new(UnfollowUserResponse)
	err := c.cc.Invoke(ctx, "/authen_and_post.AuthenticateAndPost/UnfollowUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticateAndPostClient) GetFollowerList(ctx context.Context, in *GetFollowerListRequest, opts ...grpc.CallOption) (*GetFollowerListResponse, error) {
	out := new(GetFollowerListResponse)
	err := c.cc.Invoke(ctx, "/authen_and_post.AuthenticateAndPost/GetFollowerList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticateAndPostClient) CreatePost(ctx context.Context, in *CreatePostRequest, opts ...grpc.CallOption) (*CreatePostResponse, error) {
	out := new(CreatePostResponse)
	err := c.cc.Invoke(ctx, "/authen_and_post.AuthenticateAndPost/CreatePost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticateAndPostClient) GetPost(ctx context.Context, in *GetPostRequest, opts ...grpc.CallOption) (*GetPostResponse, error) {
	out := new(GetPostResponse)
	err := c.cc.Invoke(ctx, "/authen_and_post.AuthenticateAndPost/GetPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticateAndPostClient) DeletePost(ctx context.Context, in *DeletePostRequest, opts ...grpc.CallOption) (*DeletePostResponse, error) {
	out := new(DeletePostResponse)
	err := c.cc.Invoke(ctx, "/authen_and_post.AuthenticateAndPost/DeletePost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticateAndPostClient) EditPost(ctx context.Context, in *EditPostRequest, opts ...grpc.CallOption) (*EditPostResponse, error) {
	out := new(EditPostResponse)
	err := c.cc.Invoke(ctx, "/authen_and_post.AuthenticateAndPost/EditPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticateAndPostClient) CreatePostComment(ctx context.Context, in *CreatePostCommentRequest, opts ...grpc.CallOption) (*CreatePostCommentResponse, error) {
	out := new(CreatePostCommentResponse)
	err := c.cc.Invoke(ctx, "/authen_and_post.AuthenticateAndPost/CreatePostComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authenticateAndPostClient) LikePost(ctx context.Context, in *LikePostRequest, opts ...grpc.CallOption) (*LikePostResponse, error) {
	out := new(LikePostResponse)
	err := c.cc.Invoke(ctx, "/authen_and_post.AuthenticateAndPost/LikePost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthenticateAndPostServer is the server API for AuthenticateAndPost service.
// All implementations must embed UnimplementedAuthenticateAndPostServer
// for forward compatibility
type AuthenticateAndPostServer interface {
	CheckUserAuthentication(context.Context, *CheckUserAuthenticationRequest) (*CheckUserAuthenticationResponse, error)
	CreateUser(context.Context, *UserDetailInfo) (*UserResult, error)
	EditUser(context.Context, *EditUserRequest) (*EditUserResponse, error)
	GetUserFollower(context.Context, *UserInfo) (*UserFollower, error)
	GetPostDetail(context.Context, *GetPostRequest) (*Post, error)
	FollowUser(context.Context, *FollowUserRequest) (*FollowUserResponse, error)
	UnfollowUser(context.Context, *UnfollowUserRequest) (*UnfollowUserResponse, error)
	GetFollowerList(context.Context, *GetFollowerListRequest) (*GetFollowerListResponse, error)
	CreatePost(context.Context, *CreatePostRequest) (*CreatePostResponse, error)
	GetPost(context.Context, *GetPostRequest) (*GetPostResponse, error)
	DeletePost(context.Context, *DeletePostRequest) (*DeletePostResponse, error)
	EditPost(context.Context, *EditPostRequest) (*EditPostResponse, error)
	CreatePostComment(context.Context, *CreatePostCommentRequest) (*CreatePostCommentResponse, error)
	LikePost(context.Context, *LikePostRequest) (*LikePostResponse, error)
	mustEmbedUnimplementedAuthenticateAndPostServer()
}

// UnimplementedAuthenticateAndPostServer must be embedded to have forward compatible implementations.
type UnimplementedAuthenticateAndPostServer struct {
}

func (UnimplementedAuthenticateAndPostServer) CheckUserAuthentication(context.Context, *CheckUserAuthenticationRequest) (*CheckUserAuthenticationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckUserAuthentication not implemented")
}
func (UnimplementedAuthenticateAndPostServer) CreateUser(context.Context, *UserDetailInfo) (*UserResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedAuthenticateAndPostServer) EditUser(context.Context, *EditUserRequest) (*EditUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditUser not implemented")
}
func (UnimplementedAuthenticateAndPostServer) GetUserFollower(context.Context, *UserInfo) (*UserFollower, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserFollower not implemented")
}
func (UnimplementedAuthenticateAndPostServer) GetPostDetail(context.Context, *GetPostRequest) (*Post, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPostDetail not implemented")
}
func (UnimplementedAuthenticateAndPostServer) FollowUser(context.Context, *FollowUserRequest) (*FollowUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FollowUser not implemented")
}
func (UnimplementedAuthenticateAndPostServer) UnfollowUser(context.Context, *UnfollowUserRequest) (*UnfollowUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnfollowUser not implemented")
}
func (UnimplementedAuthenticateAndPostServer) GetFollowerList(context.Context, *GetFollowerListRequest) (*GetFollowerListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFollowerList not implemented")
}
func (UnimplementedAuthenticateAndPostServer) CreatePost(context.Context, *CreatePostRequest) (*CreatePostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePost not implemented")
}
func (UnimplementedAuthenticateAndPostServer) GetPost(context.Context, *GetPostRequest) (*GetPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPost not implemented")
}
func (UnimplementedAuthenticateAndPostServer) DeletePost(context.Context, *DeletePostRequest) (*DeletePostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePost not implemented")
}
func (UnimplementedAuthenticateAndPostServer) EditPost(context.Context, *EditPostRequest) (*EditPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditPost not implemented")
}
func (UnimplementedAuthenticateAndPostServer) CreatePostComment(context.Context, *CreatePostCommentRequest) (*CreatePostCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePostComment not implemented")
}
func (UnimplementedAuthenticateAndPostServer) LikePost(context.Context, *LikePostRequest) (*LikePostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LikePost not implemented")
}
func (UnimplementedAuthenticateAndPostServer) mustEmbedUnimplementedAuthenticateAndPostServer() {}

// UnsafeAuthenticateAndPostServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthenticateAndPostServer will
// result in compilation errors.
type UnsafeAuthenticateAndPostServer interface {
	mustEmbedUnimplementedAuthenticateAndPostServer()
}

func RegisterAuthenticateAndPostServer(s grpc.ServiceRegistrar, srv AuthenticateAndPostServer) {
	s.RegisterService(&AuthenticateAndPost_ServiceDesc, srv)
}

func _AuthenticateAndPost_CheckUserAuthentication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckUserAuthenticationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticateAndPostServer).CheckUserAuthentication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authen_and_post.AuthenticateAndPost/CheckUserAuthentication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticateAndPostServer).CheckUserAuthentication(ctx, req.(*CheckUserAuthenticationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticateAndPost_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserDetailInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticateAndPostServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authen_and_post.AuthenticateAndPost/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticateAndPostServer).CreateUser(ctx, req.(*UserDetailInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticateAndPost_EditUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticateAndPostServer).EditUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authen_and_post.AuthenticateAndPost/EditUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticateAndPostServer).EditUser(ctx, req.(*EditUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticateAndPost_GetUserFollower_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticateAndPostServer).GetUserFollower(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authen_and_post.AuthenticateAndPost/GetUserFollower",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticateAndPostServer).GetUserFollower(ctx, req.(*UserInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticateAndPost_GetPostDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticateAndPostServer).GetPostDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authen_and_post.AuthenticateAndPost/GetPostDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticateAndPostServer).GetPostDetail(ctx, req.(*GetPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticateAndPost_FollowUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FollowUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticateAndPostServer).FollowUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authen_and_post.AuthenticateAndPost/FollowUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticateAndPostServer).FollowUser(ctx, req.(*FollowUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticateAndPost_UnfollowUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnfollowUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticateAndPostServer).UnfollowUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authen_and_post.AuthenticateAndPost/UnfollowUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticateAndPostServer).UnfollowUser(ctx, req.(*UnfollowUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticateAndPost_GetFollowerList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFollowerListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticateAndPostServer).GetFollowerList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authen_and_post.AuthenticateAndPost/GetFollowerList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticateAndPostServer).GetFollowerList(ctx, req.(*GetFollowerListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticateAndPost_CreatePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticateAndPostServer).CreatePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authen_and_post.AuthenticateAndPost/CreatePost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticateAndPostServer).CreatePost(ctx, req.(*CreatePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticateAndPost_GetPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticateAndPostServer).GetPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authen_and_post.AuthenticateAndPost/GetPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticateAndPostServer).GetPost(ctx, req.(*GetPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticateAndPost_DeletePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticateAndPostServer).DeletePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authen_and_post.AuthenticateAndPost/DeletePost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticateAndPostServer).DeletePost(ctx, req.(*DeletePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticateAndPost_EditPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticateAndPostServer).EditPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authen_and_post.AuthenticateAndPost/EditPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticateAndPostServer).EditPost(ctx, req.(*EditPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticateAndPost_CreatePostComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePostCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticateAndPostServer).CreatePostComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authen_and_post.AuthenticateAndPost/CreatePostComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticateAndPostServer).CreatePostComment(ctx, req.(*CreatePostCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthenticateAndPost_LikePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthenticateAndPostServer).LikePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authen_and_post.AuthenticateAndPost/LikePost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthenticateAndPostServer).LikePost(ctx, req.(*LikePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthenticateAndPost_ServiceDesc is the grpc.ServiceDesc for AuthenticateAndPost service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthenticateAndPost_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "authen_and_post.AuthenticateAndPost",
	HandlerType: (*AuthenticateAndPostServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckUserAuthentication",
			Handler:    _AuthenticateAndPost_CheckUserAuthentication_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _AuthenticateAndPost_CreateUser_Handler,
		},
		{
			MethodName: "EditUser",
			Handler:    _AuthenticateAndPost_EditUser_Handler,
		},
		{
			MethodName: "GetUserFollower",
			Handler:    _AuthenticateAndPost_GetUserFollower_Handler,
		},
		{
			MethodName: "GetPostDetail",
			Handler:    _AuthenticateAndPost_GetPostDetail_Handler,
		},
		{
			MethodName: "FollowUser",
			Handler:    _AuthenticateAndPost_FollowUser_Handler,
		},
		{
			MethodName: "UnfollowUser",
			Handler:    _AuthenticateAndPost_UnfollowUser_Handler,
		},
		{
			MethodName: "GetFollowerList",
			Handler:    _AuthenticateAndPost_GetFollowerList_Handler,
		},
		{
			MethodName: "CreatePost",
			Handler:    _AuthenticateAndPost_CreatePost_Handler,
		},
		{
			MethodName: "GetPost",
			Handler:    _AuthenticateAndPost_GetPost_Handler,
		},
		{
			MethodName: "DeletePost",
			Handler:    _AuthenticateAndPost_DeletePost_Handler,
		},
		{
			MethodName: "EditPost",
			Handler:    _AuthenticateAndPost_EditPost_Handler,
		},
		{
			MethodName: "CreatePostComment",
			Handler:    _AuthenticateAndPost_CreatePostComment_Handler,
		},
		{
			MethodName: "LikePost",
			Handler:    _AuthenticateAndPost_LikePost_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "authen_and_post.proto",
}
